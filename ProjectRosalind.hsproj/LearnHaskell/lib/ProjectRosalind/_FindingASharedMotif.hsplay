-- Haskell Playground 1.0
head "foo"
tail "foo"
append "f" []
"f" ++ []
"gat" ++ ["ga"]
"gat" : ["ga"]
"g" ++ "a"
"foo" ++ ['a']

"g"

[""] ++ []
[""] ++ ["b"]

substrings "a"
substrings "aa"
substrings "aaa"
substrings "aaaa"


substrings ""
substrings "a"
substrings "ga"
substrings "gat"
substrings "gatt"
substrings "gatta"
substrings "gattac"
substrings "gattaca"

quickCheck prop_allPossibleSubstringCount


allSubstrings "" []
allSubstrings "a" []
allSubstrings "ga" []
allSubstrings "gat" []
allSubstrings "gatt" []
allSubstrings "gatta" []
allSubstrings "gattac" []
allSubstrings "gattaca" []

import Data.List (intersect, maximumBy)
import Data.Function (on)

length results


--q = intersect x y
--r = intersect q z
--
--maximumBy (compare `on` length) r

--sortBy (\(a, _) (b, _) -> compare a b) r



