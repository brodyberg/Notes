-- Haskell Playground 1.0
head "foo"
tail "foo"
append "f" []
"f" ++ []
"gat" ++ ["ga"]
"gat" : ["ga"]
"g" ++ "a"
"foo" ++ ['a']

"g"

[""] ++ []
[""] ++ ["b"]

substrings "a"
substrings "aa"
substrings "aaa"
substrings "aaaa"


substrings ""
substrings "a"
substrings "ga"
substrings "gat"
substrings "gatt"
substrings "gatta"
substrings "gattac"
substrings "gattaca"

quickCheck prop_allPossibleSubstringCount


ssWrapper "" []
ssWrapper "a" []
ssWrapper "ga" []
ssWrapper "gat" []
ssWrapper "gatt" []
ssWrapper "gatta" []
ssWrapper "gattac" []
ssWrapper "gattaca" []

length (ssWrapper "gat" [])

x = ssWrapper "gattaca" []
y = ssWrapper "tagacca" []
z = ssWrapper "ataca" []

import Data.List (intersect, maximumBy)
import Data.Function (on)

q = intersect x y
r = intersect q z

maximumBy (compare `on` length) r

--sortBy (\(a, _) (b, _) -> compare a b) r



