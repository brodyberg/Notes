((All True), (+1)) <*> ((All False), 0)

(All True) <> (All True)
(All False) <> (All True)

(Product 3) <> (Product 4)
(Sum 3) <> (Sum 4)

getSum (Sum 2)
fst $ ((Product 3), (+9)) <*> ((Product 2), 8)

getProduct $ fst $ ((Product 3), (+9)) <*> ((Product 2), 8)

((Product 3), (+9)) <*> ((Product 2), 8)
((Sum 2), (+1)) <*> ((Sum 0), 0)

-- a combines via Monoid instance
-- b combines via function application
("Woo", (+1)) <*> (" Hoo!", 0)

Right (+3) <*> Right 4
Left "a" <*> Right 4

Just (+2) <*> Nothing
Just (+2) <*> Just 4
Nothing <*> Just 4

(+1) $ 1
fmap (+1) [1,2,3]
(+1) <$> [1,2,3]

pure (+1) <*> [1..3]

[(+1),(+2)] <*> [1..3]

[1,2,3] >>= return . (+1)

pure 1 :: [Int]
pure 1 :: Maybe Int
pure 1 :: Either a Int
pure 1 :: ([a], Int)
